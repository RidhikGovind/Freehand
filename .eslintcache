[{"C:\\Users\\user\\Desktop\\freehand\\src\\App.js":"1","C:\\Users\\user\\Desktop\\freehand\\src\\index.js":"2","C:\\Users\\user\\Desktop\\freehand\\src\\firebase.js":"3"},{"size":9958,"mtime":1611140464344,"results":"4","hashOfConfig":"5"},{"size":197,"mtime":1610903900455,"results":"6","hashOfConfig":"5"},{"size":485,"mtime":1611133387082,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"1gxbsy3",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\freehand\\src\\App.js",["15","16","17","18","19"],"import React, { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nimport { fabric } from \"fabric\";\nimport firebase from \"firebase\";\nimport { db } from \"./firebase\";\nimport paintbrush from \"./Icons/paintbrush.png\";\nimport eraser from \"./Icons/eraser.png\";\nimport dustbin from \"./Icons/dustbin.png\";\nimport square from \"./Icons/square.png\";\nimport triangle from \"./Icons/triangle.png\";\nimport circle from \"./Icons/circle.png\";\nimport selecthand from \"./Icons/selecthand.png\";\nimport text from \"./Icons/text.png\";\nimport downloadIcon from \"./Icons/download.png\";\n\n//initializing canvas variable outside for global scope\nlet canvas;\nfunction App() {\n  const [brushSize, setBrushSize] = useState(5);\n  const [brushColor, setBrushColor] = useState(\"#5DADE2\");\n  const [eraserSize, setEraserSize] = useState(10);\n  const [strokeColor, setStrokeColor] = useState(\"#000\");\n  const [JSONData, setJSONData] = useState(\"\");\n\n  //creating a firestore reference\n  const ref = db.collection(\"canvasData\").doc(\"JSONData\");\n\n  useEffect(() => {\n    canvas = new fabric.Canvas(\"canvas\");\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.color = brushColor;\n    canvas.setHeight(window.innerHeight - 100);\n    canvas.setWidth(window.innerWidth - 50);\n    canvas.freeDrawingBrush.width = brushSize;\n\n    canvas.on(\"mouse:up\", () => {\n\n      console.log(\"loaded\");\n\n      setJSONData(JSON.stringify(canvas));\n\n      ref.set({\n        data: JSONData,\n      });\n\n      ref.onSnapshot((snap) => {\n        const JSONFirebase = snap.data().data;\n        canvas.loadFromJSON(JSONFirebase, canvas.renderAll.bind(canvas));\n      });\n\n    });\n\n  }, []);\n\n  useEffect(() => {\n    canvas.freeDrawingBrush.width = brushSize;\n  }, [brushSize]);\n\n  useEffect(() => {\n    canvas.freeDrawingBrush.color = brushColor;\n  }, [brushColor]);\n\n  useEffect(() => {\n    canvas.freeDrawingBrush.width = eraserSize;\n  }, [eraserSize]);\n\n  useEffect(() => {\n    saveData();\n  }, [JSONData]);\n\n  //function to change brush size\n  const handleBrushSizeChange = (e) => {\n    setBrushSize(e.target.value);\n  };\n\n  //function to generate different shapes\n  const generateShape = (e) => {\n    let elementClassName = e.target.classList;\n    canvas.isDrawingMode = false;\n    const strokeWidth = 2;\n\n    if (elementClassName == \"squareShape\") {\n      const rect = new fabric.Rect({\n        left: 100,\n        top: 100,\n        fill: \"transparent\",\n        width: 60,\n        height: 60,\n        angle: 90,\n        stroke: strokeColor,\n        strokeWidth,\n      });\n      canvas.add(rect);\n    } else if (elementClassName == \"triangleShape\") {\n      const rect = new fabric.Triangle({\n        left: 200,\n        top: 150,\n        fill: \"transparent\",\n        width: 60,\n        height: 60,\n        stroke: strokeColor,\n        strokeWidth,\n      });\n      canvas.add(rect);\n    } else if (elementClassName == \"circleShape\") {\n      const rect = new fabric.Circle({\n        left: 100,\n        top: 100,\n        radius: 50,\n        stroke: strokeColor,\n        strokeWidth,\n        fill: \"transparent\",\n      });\n      canvas.add(rect);\n    } else {\n      return;\n    }\n  };\n\n  // function to clear canvas or delete the selected shapes\n  const deleteObjects = () => {\n    const activeObjects = canvas.getActiveObjects();\n\n    if (activeObjects.length === 0) {\n      canvas.clear();\n      return;\n    } else if (activeObjects.length) {\n      activeObjects.forEach((object) => {\n        canvas.remove(object);\n      });\n    }\n  };\n\n  const addTextInput = () => {\n    const textInput = new fabric.Textbox(\"Enter Text\", {\n      left: 100,\n      top: 100,\n      fontFamily: \"ubuntu\",\n      width: 30,\n      height: 40,\n    });\n    canvas.add(textInput);\n    canvas.isDrawingMode = false;\n  };\n\n  // function to upload JSON data from firestore\n  const saveData = () => {\n    setJSONData(JSON.stringify(canvas));\n    ref.set({\n      data: JSONData,\n    });\n    console.log(\"JSONData saved to Firestore\");\n  };\n\n  // function to load JSON data from firestore\n  const loadData = () => {\n    ref.onSnapshot((snap) => {\n      const JSONFirebase = snap.data().data;\n      canvas.loadFromJSON(JSONFirebase, canvas.renderAll.bind(canvas));\n    });\n  };\n\n  //function to delete JSON data from firestore\n  const clearSaved = () => {\n    ref.update({\n      data: firebase.firestore.FieldValue.delete(),\n    });\n    canvas.clear();\n  };\n\n  //function to download the canvas content as jpeg\n  const download = () => {\n    var dataURL = canvas.toDataURL({\n      format: \"jpeg\",\n      quality: 0.9,\n    });\n    const imageLink = document.createElement(\"a\");\n    if (typeof imageLink.download === \"string\") {\n      imageLink.href = dataURL;\n      imageLink.download = \"canvas.jpg\";\n      document.body.appendChild(imageLink);\n      imageLink.click();\n      document.body.removeChild(imageLink);\n    } else {\n      window.open(dataURL);\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"toolSection\">\n        <div className=\"toolField\">\n          <div className=\"brushWidth\">\n            <div className=\"icon\">\n              <img\n                src={paintbrush}\n                alt=\"paintbrush-icon\"\n                className=\"paintBrushIcon\"\n                onClick={() => {\n                  setBrushColor(\"#5DADE2\");\n                  canvas.isDrawingMode = true;\n                }}\n              />\n            </div>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"50\"\n              step=\"5\"\n              value={brushSize}\n              className=\"slider\"\n              onChange={handleBrushSizeChange}\n            ></input>\n          </div>\n\n          <div className=\"colorsets\">\n            <div\n              className=\"blue\"\n              style={{ background: \"#5DADE2\" }}\n              onClick={() => {\n                setBrushColor(\"#5DADE2\");\n                setStrokeColor(\"#5DADE2\");\n              }}\n            ></div>\n            <div\n              className=\"red \"\n              style={{ background: \"#E74C3C\" }}\n              onClick={() => {\n                setBrushColor(\"#E74C3C\");\n                setStrokeColor(\"#E74C3C\");\n              }}\n            ></div>\n            <div\n              className=\"yellow \"\n              style={{ background: \"#F1C40F\" }}\n              onClick={() => {\n                setBrushColor(\"#F1C40F\");\n                setStrokeColor(\"#F1C40F\");\n              }}\n            ></div>\n            <div\n              className=\"green \"\n              style={{ background: \"#239B56\" }}\n              onClick={() => {\n                setBrushColor(\"#239B56\");\n                setStrokeColor(\"#239B56\");\n              }}\n            ></div>\n            <div\n              className=\"black \"\n              style={{ background: \"#17202A\" }}\n              onClick={() => {\n                setBrushColor(\"#17202A\");\n                setStrokeColor(\"#239B56\");\n              }}\n            ></div>\n          </div>\n\n          <div className=\"eraser\">\n            <div className=\"icon eraserDesc\">\n              <img\n                src={eraser}\n                alt=\"eraser-icon\"\n                className=\"eraserIcon\"\n                onClick={(e) => {\n                  setBrushColor(\"#FFFFFF\");\n                }}\n              />\n            </div>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"100\"\n              step=\"10\"\n              value={eraserSize}\n              className=\"slider\"\n              onChange={(e) => setEraserSize(e.target.value)}\n            ></input>\n          </div>\n\n          <div className=\"deleteField\">\n            <div className=\"icon\" onClick={deleteObjects}>\n              <img src={dustbin} alt=\"delete-icon\" className=\"deleteBtn\" />\n            </div>\n          </div>\n\n          <div className=\"selectionHand\">\n            <div\n              className=\"icon\"\n              onClick={() => (canvas.isDrawingMode = false)}\n            >\n              <img\n                src={selecthand}\n                alt=\"select-icon\"\n                className=\"selecthandBtn\"\n              />\n            </div>\n          </div>\n\n          <div className=\"textInput\">\n            <div className=\"icon\">\n              <img\n                src={text}\n                alt=\"textInput-icon\"\n                className=\"textInputBtn\"\n                onClick={addTextInput}\n              />\n            </div>\n          </div>\n\n          <div className=\"download\">\n            <div className=\"icon\">\n              <img\n                src={downloadIcon}\n                alt=\"download-icon\"\n                className=\"downloadBtn\"\n                onClick={download}\n              />\n            </div>\n          </div>\n\n          <div className=\"save icon\" onClick={saveData}>\n            Save\n          </div>\n          <div className=\"load icon\" onClick={loadData}>\n            Load\n          </div>\n\n          <div className=\"clearSaved icon\" onClick={clearSaved}>\n            Clear Saved\n          </div>\n\n          <div className=\"shapesMenuField\">\n            <div className=\"icon square\">\n              <img\n                src={square}\n                alt=\"square-icon\"\n                className=\"squareShape\"\n                onClick={(e) => generateShape(e)}\n              />\n            </div>\n            <div className=\"icon\">\n              <img\n                src={triangle}\n                alt=\"triangle-icon\"\n                className=\"triangleShape\"\n                onClick={(e) => generateShape(e)}\n              />\n            </div>\n            <div className=\"icon\">\n              <img\n                src={circle}\n                alt=\"circle-icon\"\n                className=\"circleShape\"\n                onClick={(e) => generateShape(e)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"canvasField\">\n        <canvas id=\"canvas\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\user\\Desktop\\freehand\\src\\index.js",[],"C:\\Users\\user\\Desktop\\freehand\\src\\firebase.js",[],{"ruleId":"20","severity":1,"message":"21","line":54,"column":6,"nodeType":"22","endLine":54,"endColumn":8,"suggestions":"23"},{"ruleId":"20","severity":1,"message":"24","line":70,"column":6,"nodeType":"22","endLine":70,"endColumn":16,"suggestions":"25"},{"ruleId":"26","severity":1,"message":"27","line":83,"column":26,"nodeType":"28","messageId":"29","endLine":83,"endColumn":28},{"ruleId":"26","severity":1,"message":"27","line":95,"column":33,"nodeType":"28","messageId":"29","endLine":95,"endColumn":35},{"ruleId":"26","severity":1,"message":"27","line":106,"column":33,"nodeType":"28","messageId":"29","endLine":106,"endColumn":35},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'JSONData', 'brushColor', 'brushSize', and 'ref'. Either include them or remove the dependency array.","ArrayExpression",["30"],"React Hook useEffect has a missing dependency: 'saveData'. Either include it or remove the dependency array.",["31"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"32","fix":"33"},{"desc":"34","fix":"35"},"Update the dependencies array to be: [JSONData, brushColor, brushSize, ref]",{"range":"36","text":"37"},"Update the dependencies array to be: [JSONData, saveData]",{"range":"38","text":"39"},[1641,1643],"[JSONData, brushColor, brushSize, ref]",[1953,1963],"[JSONData, saveData]"]